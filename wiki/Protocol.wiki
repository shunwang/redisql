#labels Phase-Requirements
= Client/Server Protocol =

Redisql is based on the NOSQL data-store redis. Redis has a very simple, powerful, and efficient ASCII protocol for transferring data via TCP, UDP, and Unix Domain Sockets.
<br/>

Redis protocol is specified [http://code.google.com/p/redis/wiki/ProtocolSpecification here]. This is the starting point for learning about the protocol, and this is where the protocol is defined.
<br/>

Redisql's commands basically have the same syntax (except INSERT and UPDATE have one client side dependency to avoid unneeded overhead, and SQL where clauses are transmitted as a single argument for the same reason)
<br/>

An Example: the Redisql Command "DROP TABLE tablename" would have the following format when transmitted via a TCP socket to the Redisql Server
{{{
CLIENT: "DROP\r\nTABLE\r\ncustomer\r\n"
SERVER: "+OK\r\n"
}}}

"DROP TABLE", "DROP INDEX", "DESC" and "DELETE" are the only Redisql commands w/ constant number of arguments (3,3,2,5 respectively). {these are referred to as "Bulk commands" in redis' protocol}
<br/>

The rest of the Redisql commands are "Multi Bulk Commands" , which means the command "SELECT age FROM foo WHERE id = 7" would look like this:
{{{
*8
$6
SELECT
$3
age
$4
FROM
$3
foo
$5
WHERE
$2
id
$1
=
$1
7
}}}
  * The first line is the number or words
  * the lines that start w/ $X, mean that the next line has X bytes
  * that is the whole protocol, it is straightforward.

This protocol seems to have a lot of overhead when compared to a binary protocol. In practice the overhead the protocol produces is not that significant when network overhead and various operating system page copy steps are taken into account. The upside is, it is human readable ... writing clients is a breeze, you can even tap into data streams using the linux _netcat_ command.
<br/>

There are two special cases in Redisql (INSERT and UPDATE). The above protocol, which is space delimited would create too much overhead if a INSERT statement had 20 columns. For this reason the *data part* of an INSERT or UPDATE *must all be on one line*<br/>
<br/>
INSERT example:
{{{
*5
$6
INSERT
$4
INTO
$5
table
$6
VALUES
$48
(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p)
}}}
UPDATE example:
{{{
*5
$6
UPDATE
$4
table
$5
SET
$37
a=1, b = 2, c=3, d=4, e=5, f=6, g = 7
$5
WHERE
$6
id = 7
}}}

In the above 2 examples, the overhead of the protocol is diminished, as the data constitutes the bulk of the request. This is also generally the case w/ responses.
<br/>

This redis protocol has been implemented [http://code.google.com/p/redis/wiki/SupportedLanguages in over 15 languages in redis], so supporting Redisql ONLY requires adding about 10 commands to these clients, as Redisql has not introduced any changes to the core protocol.<br/>

Ported libraries for Redisql include 
  * Ruby (a patch on redis-rb) found [http://github.com/JakSprats/redis-rb here]
  * PHP  (a patch on Rediska( found [http://github.com/JakSprats/Rediska here] w/ the main library [http://github.com/JakSprats/Rediska/blob/master/library/Redisqlska.php here], only 500 lines and including a mysql interface that imports/exports tables from/to Mysql w/ single commands.

*NOTE*
One difference between the Redis protocol and the Redisql protocol is the command "SELECT", which is a SQL SELECT in Redisql and databases should be changed by using the command "CHANGEDB" - although using the redis "SELECT DB" has been included for backwards compatibility
<br/>